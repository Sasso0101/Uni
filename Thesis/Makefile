# Compiler and flags
CC = gcc
BASE_CFLAGS = -Wall -Wextra -std=c11 -MMD -MP # -MMD -MP for auto-dependency generation
LINK_THREAD_FLAG = -pthread

ifeq ($(DEBUG),1)
  OPT_CFLAGS = -g -O0
else
  OPT_CFLAGS = -O3
endif

# CFLAGS for compilation. Includes base, optimization, and thread flags.
CFLAGS = $(BASE_CFLAGS) $(OPT_CFLAGS) $(LINK_THREAD_FLAG)
# LDFLAGS for linking. Add other libraries like -lm if needed, e.g., LDFLAGS = $(LINK_THREAD_FLAG) -lm
LDFLAGS = $(LINK_THREAD_FLAG)

# Directories
SRC_DIR = src
OBJ_DIR = obj
BIN_DIR = bin

PROGRAM_NAMES = bfs tc

# Full paths to target executables (e.g., bin/bfs, bin/tc)
TARGET_EXECS = $(addprefix $(BIN_DIR)/, $(PROGRAM_NAMES))

# Main source files corresponding to each program (e.g., src/bfs.c, src/tc.c)
MAIN_SRCS = $(foreach P,$(PROGRAM_NAMES),$(SRC_DIR)/$(P).c)
# Main object files for each program (e.g., obj/bfs.o, obj/tc.o)
# These are derived from MAIN_SRCS, not by a wildcard, to ensure they match PROGRAM_NAMES.
MAIN_OBJS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(MAIN_SRCS))

# All .c files found in the source directory
ALL_SRCS_IN_DIR = $(wildcard $(SRC_DIR)/*.c)

# Library source files are all .c files in SRC_DIR that are NOT main source files
LIB_SRCS = $(filter-out $(MAIN_SRCS),$(ALL_SRCS_IN_DIR))
# Library object files (e.g., obj/utils.o, obj/graph_parser.o)
LIB_OBJS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(LIB_SRCS))

# All object files that need to be compiled (includes both main ones and library ones)
# This is used for dependency generation.
ALL_OBJS_TO_COMPILE = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(ALL_SRCS_IN_DIR))
# Dependency files (.d files generated by -MMD -MP)
DEPS = $(ALL_OBJS_TO_COMPILE:.o=.d)


# --- Rules ---
.PHONY: all clean

# Default target: build all programs listed in TARGET_EXECS
all: $(TARGET_EXECS)

# Pattern rule for linking an executable: $(BIN_DIR)/program_name
# Example: To build $(BIN_DIR)/bfs, the stem % is "bfs".
# It depends on its specific main object file $(OBJ_DIR)/bfs.o
# and all shared library object files defined in $(LIB_OBJS).
# $(BIN_DIR) is an order-only prerequisite to ensure the directory exists before linking.
$(BIN_DIR)/%: $(OBJ_DIR)/%.o $(LIB_OBJS) | $(BIN_DIR)
	@echo "Linking '$@'"
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

# Rule to create the object directory if it doesn't exist.
# Used as an order-only prerequisite for compilation.
$(OBJ_DIR):
	mkdir -p $(OBJ_DIR)

# Rule to create the binary directory if it doesn't exist.
# Used as an order-only prerequisite for linking.
$(BIN_DIR):
	mkdir -p $(BIN_DIR)

# Generic pattern rule to compile any $(SRC_DIR)/source.c to $(OBJ_DIR)/source.o
# This rule compiles both main source files (e.g., src/bfs.c) and library source files (e.g., src/utils.c).
# $(OBJ_DIR) is an order-only prerequisite.
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)
	@echo "Compiling '$<' -> '$@'"
	$(CC) $(CFLAGS) -c $< -o $@

# Include auto-generated dependency files.
# The hyphen '-' allows make to continue if the .d files don't exist (e.g., on a clean build).
-include $(DEPS)

clean:
	@echo "Cleaning up object files and binaries..."
	rm -rf $(OBJ_DIR) $(BIN_DIR)